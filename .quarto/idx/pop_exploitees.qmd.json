{"title":"Populations exploitées","markdown":{"yaml":{"title":"Populations exploitées"},"headingText":"Prélèvements et effets Allee","headingAttr":{"id":"sec-allee-prelev","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\nNous reprenons le modèle précédent sur l'effet Allee mais en prenant en compte des prélèvements externes avec un effort (taux) de prélèvement $E$ :\n$$\n\\dot x = r x \\left(\\frac{x}{\\epsilon}-1\\right)\\left(1-\\frac{x}{K}\\right)-Ex.\n$$ {#eq-alleeprelev}\n\nLa simulation de ce modèle pour différentes valeurs de $E$ (par exemple $E=0.2$ ou $E=0.85$) ne présente aucune difficulté supplémentaire.\n\nNous allons maintenant nous intéresser à une situation où l'effort de prélèvement $E$ varie au cours du temps entre une valeur soutenable $E_s$ (par exemple $0.2$), et une valeur excessive $E_x$ (par exemple $0.85$). \n\nL'attendu théorique est que si les prélèvements sont maintenus à une valeur excessive $E_x$ trop longtemps, la population disparait irrémédiablement même si les prélèvements sont ramenés à une valeur initialement soutenable $E_s$.\n\n### Prélèvements variables dans le temps\n\n\n- nettoyage de l'espace de travail et chargement des modules \n\n```{python}\n#| code-fold: true\n%reset -f\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n```\n\nDéfinissons la fonction `Evar()`, qui renvoit $E_s$ si $t$ est plus petit que $T_s$ ou plus grand que $T_s+T_x$, et $E_x$ sinon.\n\nDéfinissons d'abord les paramètres de la fonction et encapsulons les :\n\n```{python}\nE_s = 0.2\nE_x = 0.85\nT_s = 10.0\nT_x = 9.0\n\nparams_Evar = np.array([E_s, E_x, T_s, T_x])\n```\n\nDéfinissons la fonction `Evar()` :\n\n```{python}\ndef Evar(t, params):\n    E_s, E_x, T_s, T_x = params\n    if t <= T_s or t > T_s+T_x:\n        return E_s\n    else:\n        return E_x\n```\n\nDéfinissons les autres paramètres du modèle et l'intervalle de temps considéré\n\n```{python}\n#| code-fold: true\n\n## paramètres\nr = 1.0       # taux de croissance intrinsèque\nepsilon = 2.0 # seuil de Allee\nK = 10.0      # capacité de charge\nparams_allee = np.array([r, K, epsilon])\n\n## tspan\nt_0 = 0.0           \nt_fin = 30.0        \npas_t = 0.01        \ntspan = np.arange(t_0, t_fin, pas_t)\n```\n\nLa fonction se comporte bien comme attendu (@fig-evar).\n```{python}\n#| label: fig-evar\n#| code-fold: true\n#| fig-cap: représentation de la fonction `Evar()` en fonction du temps\n\nfig, ax = plt.subplots(1, 1, figsize=(6,4))  \nfig.suptitle('Evar() en fonction du temps',\n              va='top', fontsize='14')\n\nax.plot(tspan, [Evar(t, params_Evar) for t in tspan], label = \"Evar(t)\")\n\n## axes / légendes / grille\nax.legend(fontsize='10')\nax.set_xlabel('Temps $t$', fontsize='12')\nax.set_ylabel('Effort de prélèvement', fontsize='12')\nax.grid()\n```\n::: {.callout-note}\nOn notera l'ultilisation d'une compréhension de liste pour le tracé de `Evar()`. En effet, la fonction avec son test `if` travaille sur un argument `t` qui est un scalaire et renvoit un scalaire ce qui ne permet pas d'appeler `Evar(tspan)` directement.\n:::\n\n### Simulations\n \nDéfinissons le système dynamique comme usuellement :\n\n```{python}\ndef model_alleePrelev(etat, t, params, paramsEv): \n    x = etat              # on recupere l'etat\n    r, K, epsilon = params     # on récupère les paramètres\n    xdot = r*x*(x/epsilon-1)*(1-x/K) - Evar(t, paramsEv)*x    # la derivee \n    return xdot    \n```\n\n::: {.callout-important}\nA la différente de précédemment, le modèle est ici non-autonome (la dérivée dépend du temps en plus de l'état) via la fonction `Evar(t)`. \n:::\n\nIntégrons :\n\n```{python}\n## condition initiale\nx0 = K\n\n## intégration\nint_alleePrelev = odeint(model_alleePrelev,\n                         x0,\n                         tspan,\n                         args=(params_allee, params_Evar),\n                         hmax=pas_t)\n```\n\n::: {.callout-note}\nComme la fonction `Evar()` a deux arguments de paramètres, on les passe passe à la suite comme `tuple` à `args`.\n:::\n\nReprésentation graphique, lorsque la durée des prélèvements excessifs n'est pas trop longue la population récupère de la pression de prélèvement trop intense :\n\n```{python}\n#| label: fig-alleeprelev1\n#| code-fold: true\n#| fig-cap: simulation du modèle avec effets Allee forts et prélèvements (@eq-alleeprelev)\nfig1, ax1 = plt.subplots(1, 1)  \nfig1.suptitle('Simulation du modèle avec effets Allee'\\\n    ' forts et prélèvements; $T_x={}$'.format(T_x), \n              va='top', fontsize='14')\n\n## simulation\nax1.plot(tspan, int_alleePrelev,\n        label = \"$x(t)$\")\n\n## axes / légendes / grille\nax1.legend(fontsize='10')\nax1.set_xlabel('Temps $t$', fontsize='12')\nax1.set_ylabel('Densité de population $x$', fontsize='12')\nax1.grid()\n```\n\nPar contre, si la durée des prélèvements est trop longue, la population est conduite à l'extinction. \n\nModification du paramètre $T_x$, réintégration, représentation :\n\n\n```{python}\n#| label: fig-alleeprelev2\n#| code-fold: true\n#| fig-cap: simulation du modèle avec effets Allee forts et prélèvements (@eq-alleeprelev)\n\n## redefinition de T_x et des paramètres\nT_x2 = 9.2\nparams_Evar2 = np.array([E_s, E_x, T_s, T_x2])\n\n## intégration\nint_alleePrelev2 = odeint(model_alleePrelev,\n                         x0,\n                         tspan,\n                         args=(params_allee, params_Evar2),\n                         hmax=pas_t)\n\nfig2, ax2 = plt.subplots(1, 1)  \nfig2.suptitle('Simulation du modèle avec effets Allee forts '\\\n    'et prélèvements; $T_x={}$'.format(T_x), \n              va='top', fontsize='14')\n\n## simulation\nax2.plot(tspan, int_alleePrelev2,\n        label = \"$x(t)$\")\n\n## axes / légendes / grille\nax2.legend(fontsize='10')\nax2.set_xlabel('Temps $t$', fontsize='12')\nax2.set_ylabel('Densité de population $x$', fontsize='12')\nax2.grid()\n```\n\n### Diagramme de bifurcations\n\nUne représentation complémentaire dans l'expace $(E,x^*)$, permet de bien saisir le phénomène de catastrophe lié à la présence d'une bifurcation pli.\n\nNous commençons par calculer le lieu des équilibres en fonction de $E$ puis traçons les deux cas simulés plus haut pour deux valeurs de $T_x$. \n\nLes équilibres sont définis par :\n\n- $x^*=0$ est toujours équilibre\n\n- les équilibres $x^*$ positifs  vérifient :\n$$ \nE = r\\left(\\frac{x^*}{K_a}-1\\right)\\left(1-\\frac{x^*}{K}\\right)\n$$\n\nTraçons tout d'abord les lieux des équilibres :\n```{python}\n#| code-fold: true\n\n## définition de vecteurs annexes E_plot et x_plot \nE_plot = np.arange(0, 1, 0.01)\nx_plot_l = np.arange(epsilon, (K+epsilon)/2, 0.01)\nx_plot_L = np.arange((K+epsilon)/2, K, 0.01)\n\n## définition des valeurs de E correspondant aux équilibres positifs\nE_eq_l = r*(x_plot_l/epsilon-1)*(1-x_plot_l/K)\nE_eq_L = r*(x_plot_L/epsilon-1)*(1-x_plot_L/K)\n\n## création d'une figure, et de deux subplots (ax6, ax7)\nfig2, (ax3, ax4) = plt.subplots(1, 2, figsize=(9, 6))  \n\n## titre de la figure\nfig2.suptitle('Effet Allee forts et prèlevements\\n '\\\n    '$T_x$ = {} (gauche), $T_x$ = {} (droite)'\n              .format(T_x, T_x2), va='top', fontsize='14')\n\n## premier subplot\n## tracé du lieu des équilibres\nax3.plot(E_plot, np.zeros_like(E_plot), color = 'C2')\nax3.plot(E_eq_L, x_plot_L, color='C2', label='équilibre stable')\nax3.plot(E_eq_l, x_plot_l, color='C3', label='équilibre instable')\n\n## labellisation des axes\nax3.set_xlabel('effort de prélèvement $E$', fontsize='12')\nax3.set_ylabel('densité de population $x$', fontsize='12')\nax3.grid()\n\n## second subplot\n## tracé du lieu des équilibres\nax4.plot(E_plot, np.zeros_like(E_plot), color = 'C2')\nax4.plot(E_eq_L, x_plot_L, color='C2', label='équilibre stable')\nax4.plot(E_eq_l, x_plot_l, color='C3', label='équilibre instable')\n\n## labellisation des axes\nax4.set_xlabel('effort de prélèvement $E$', fontsize='12')\nax4.grid()\n\nplt.close(fig2)\n```\n\nOn complète la figure avec l'ajout des trajectoires en fonction de $E$ et affichage de la figure complète :\n\n```{python}\n#| label: fig-alleebif\n#| fig-cap: bifurcation pli et catastrophe dans le modèle avec effet Allee et prélèvements\n\n## premier subplot\nax3.plot([Evar(t, params_Evar) for t in tspan], int_alleePrelev, \n         color = 'C0', label = 'trajectoire')\nax3.legend(fontsize='10', loc = 'lower right', \n           bbox_to_anchor=(0.5, 0.05, 0.5, 0.5))\n\n## second subplot\nax4.plot([Evar(t, params_Evar2) for t in tspan], int_alleePrelev2, \n         color = 'C0', label = 'trajectoire')\nax4.legend(fontsize='10', loc = 'lower right', \n           bbox_to_anchor=(0.5, 0.05, 0.5, 0.5))\n\ndisplay(fig2)\n```\n::: {.callout-note}\nNotons le remplissage de la figure en deux cellules Jupyter successives, avec un seul affichage grace à `plt.close()` et `display()`.\n:::\n\n\n## La tordeuse du bourgeon de l'épinette {#sec-tordeuse}\n\n### Population d'oiseaux constante\n\nNous considérons le modèle de dynamique de populations suivant, inspiré de @ludwig1978 :\n\n$$\n\\dot x =rx\\left(1-\\frac{x}{K}\\right) - \\frac{\\alpha x^2}{h^2+x^2}\\ y\n$$ {#eq-tordeuse}\n\nOn procède classiquement :\n\n```{python}\n#| code-fold: true\n## on nettoie l'espace de travail et on reload les modules\n%reset -f\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n\n## tspan\nt_0 = 0             \nt_fin = 3.0        \npas_t = 0.01\ntspan = np.arange(t_0, t_fin, pas_t)\n\n## paramètres du modèle\nr = 5.0\nK = 10.0\nalpha = 1.0\nh = 0.5\ny_c = 7.0\nparams_tordeuse_yc = np.array([r, K, alpha, h, y_c])\n\n## définition du modèle tordeuse avec pop oiseaux constante\ndef model_tordeuse_yc(etat, t, params): \n    x = etat              # on recupere l'etat\n    r, K, alpha, h, y_c = params     # on récupère les paramètres\n    xdot = r*x*(1-x/K) - alpha*(x**2)*y_c/((h**2)+(x**2))    # la derivee \n    return xdot           # on renvoie la derivée calculée\n```\n\nPour mettre en valeur la multi-stabilité, nous intégrons depuis plusieurs conditions initiales, comme dans la [section](pop_isolees.qmd#sec-allee) sur l'effet Allee, et définissons une fonction pour faire une boucle :\n\n```{python}\n#| code-fold: true\n\ndef int_tordeuse(x0, tspan=tspan, params=params_tordeuse_yc):\n    sim_tordeuse = odeint(\n                model_tordeuse_yc,        \n                x0,              \n                tspan,           \n                args=(params,),  \n                hmax=pas_t)\n    return sim_tordeuse\n\n## multi-conditions initiales\nx0_step = 1.35\nx0_arr = np.arange(x0_step, K, x0_step)\n```\n\nLa représentation graphique suit le modèle de la [section](pop_isolees.qmd#sec-allee) que nous complèterons ensuite avec les équilibres positifs.\n\n```{python}\n#| code-fold: true\n\nfig, ax = plt.subplots(1, 1)  \nfig.suptitle('Simulation du modèle de tordeuse avec population'\\\n    ' d\\'oiseaux constante', \n              va='top', fontsize='14')\n\n## redéfinition du cycle des couleurs pour un dégradé de bleu\ncolorTordeuse = plt.cm.Blues(np.linspace(.8, .3, x0_arr.shape[0]))\nax.set_prop_cycle(color = colorTordeuse)\n\n## simulations\nax.plot(tspan, int_tordeuse(x0_arr[0]),\n        label = \"$x(t)$\")\nfor x0 in x0_arr[1:]:       # x0 parcour x0_arr\n    ax.plot(tspan, int_tordeuse(x0)) \n\n## équilibres\nax.plot(tspan, np.zeros_like(tspan),\n        color = 'C3',\n        linestyle = 'dashed',\n        label = \"équilibre instable\")\n\n## axes / légendes / grille\nax.set_xlabel('Temps $t$', fontsize='12')\nax.set_ylabel('Densité de population $x$', fontsize='12')\nax.grid()\nplt.close(fig)\n```\n\nLes équilibres positifs sont solutions d'un polynôme de degré 3 :\n$$\nr\\left(1-\\frac{x^*}{K}\\right)\\left(h^2+x^{*2}\\right)-\\alpha x^* y = 0,\n$$ {#eq-eq-tordeuse}\net ils n'ont pas de forme facile à expliciter analytiquement. Nous allons les calculer numériquement via les méthodes pour polynômes de `numpy` pour pouvoir les intégrer à la figure précédente.\n\n```{python}\n## monôme de degré 1\nz = np.polynomial.Polynomial([0, 1])\n\n## polynome dont les racines sont les x* > 0\npol = r*(1-z/K)*(h**2+z**2)-alpha*z*y_c\n\n## on calcule les racines et on récupère seulement les réelles, > 0 et < K\neq_pos = pol.roots()[(np.isreal(pol.roots())) \n            * (pol.roots() < K) * (pol.roots() > 0)] \n```\n::: {.callout-note}\n`pol.roots()` renvoit un `array` avec toutes les racines de l'@eq-eq-tordeuse. Les seules qui font sens dans notre problème sont les racines réelles, positives, et plus petites que $K$. Nous utilisons un masque booléen sur l'`array` renvoyé pour filtrer seulement les racines vérifiant ces conditions. \n:::\n\nComplétons maintenant la figure :\n```{python}\n#| label: fig-tordeuse-yc\n#| fig-cap: simulation du modèle de tordeuse, population d'oiseaux constante (@eq-tordeuse)\n\n## d'après l'étude mathématique, on s'attend à 1 ou 3 équilibres positifs\nif eq_pos.size == 1:\n    ax.plot(tspan, np.ones_like(tspan)*eq_pos, \n            color='C2', label =\"équilibre stable\")\n\nelif eq_pos.size == 3:\n    ax.plot(tspan, np.ones_like(tspan)*eq_pos[0], \n            linestyle = 'dashed', color='C2', label='équilibre stable')\n    ax.plot(tspan, np.ones_like(tspan)*eq_pos[1], \n            linestyle = 'dashed', color='C3')\n    ax.plot(tspan, np.ones_like(tspan)*eq_pos[2], \n            linestyle = 'dashed', color='C2')\n\nax.legend(fontsize='10')\ndisplay(fig)\n```\n\nPour le diagramme de bifurcation dans l'espace $(y, x)$, on commence par calculer les différentes branches du lieu des points d'équilibre positifs\n```{python}\n## équilibres positifs\n## on récupère les extrema du lieu des équilibres positifs \nfrom sympy import Symbol, solve, Derivative, re\nx = Symbol('x')\n## lieu des équilibres\nyfunc = r*(1-x/K)*(h**2+x**2)/(alpha*x)\n## dérivée\ndyfunc = Derivative(yfunc, x).doit()\n## points critiques positifs. \n## solve() renvoit ici des complexes avec partie Im. presque nulles\ncrit_points = [re(root) for root in solve(dyfunc) if re(root)>0]\n\n## on calcule chacune des branches\nxplot1 = np.arange(0.01, crit_points[0], 0.01)\nxplot2 = np.arange(crit_points[0], crit_points[1], 0.01)\nxplot3 = np.arange(crit_points[1], K, 0.01)\nyeq1 = r*(1-xplot1/K) / (alpha*xplot1)*(h**2+xplot1**2)\nyeq2 = r*(1-xplot2/K) / (alpha*xplot2)*(h**2+xplot2**2)\nyeq3 = r*(1-xplot3/K) / (alpha*xplot3)*(h**2+xplot3**2)\n```\n:::{.callout-note}\nNous avons utilisé ici le module `sympy` pour calculer les points critiques du lieu des points d'équilibre positifs. Notons la compréhension de liste pour générer les points critiques.\n:::\n\n```{python}\n#| label: fig-tordeuxe-bif\n#| fig-cap : diagramme de bifurcation pour l'@eq-tordeuse en fonction de la taille de population d'oiseaux\n#| code-fold: true\n\nfig2, ax2 = plt.subplots(1, 1)\n\nfig2.suptitle('Diagramme de bifurcation pour le modèle'\\\n    ' de tordeuse', \n              va='top', fontsize='14')\n\n## équilibre nul\nyplot = np.arange(0, 15, 0.1)\nax2.plot(yplot, np.zeros_like(yplot), color = \"C3\", label = \"équilibre instable\")\n\n## équilibres positifs\nax2.plot(yeq1, xplot1, color='C2', label='équilibre stable')\nax2.plot(yeq2, xplot2, color='C3')\nax2.plot(yeq3, xplot3, color='C2')\n\n## bornes abscisses\nax2.set_xlim(left = -.50, right = 15)\n\nax2.set_ylabel('Population de tordeuses $x$', fontsize='12')\nax2.set_xlabel('Population d\\'oiseaux $y$', fontsize='12')\nax2.legend(loc='center left')\nax2.grid()\n```\n\n\n\n### Population d'oiseaux variable\n\nLe changement principal ici est la dimension du modèle (dimension 2) :  les tailles de populations de tordeuses $x$ et d'oiseaux $y$ varient toutes deux au cours du temps en s'influençant l'une l'autre, avec une population d'oiseaux qui varie lentement (d'où le paramètre $\\varepsilon$).\n\nLe modèle prend la forme :\t\t \t\t\t\n$$ \n\\left\\{\n\\begin{array}{l}\n\\displaystyle \\dot x = rx\\left(1-\\frac{x}{K}\\right) - \\frac{\\alpha x^2}{h^2+x^2}\\ y \\\\[.3cm]\n\\displaystyle \\dot y = \\varepsilon \\left(\\frac{n \\alpha x^2}{h^2+x^2}\\ y -m y\\right)\n\\end{array}\n\\right.\n$$ {#eq-tordeuse-yvar}\n\nLa fonction `odeint()` intègre parfaitement ce type de système, il faut juste écrire correctement le système d'équations différentielle à passer à la fonction.\n\n```{python}\ndef model_tordeuse_yvar(etat, t, params):\n    x, y = etat                                 # recupere les variables d'etat\n    r, K, alpha, h, epsilon, n, m = params      # recupere les parametres \n    etatdot = [r*x*(1 - x/K) - alpha*x**2/(h**2+x**2)*y,   # dot x\n               epsilon*(n*alpha*x**2/(h**2+x**2)-m)*y]     # dot y\n\n    return etatdot                                      # renvoit la derivee\n```\n\nDéfinissons les conditions initiales et paramètres :\n\n```{python}\n## densités initiales de populations\nx0 = 1\ny0 = 2.5\netat0_tordeuse_yvar = np.array([x0, y0]) # encapsulation \n\n## tspan\ntfin_yvar = 400.0\ntspan_yvar = np.arange(0.0, tfin_yvar, pas_t)\n\n## paramètres spécifiques à la population d'oiseaux\nepsilon = 0.01\nn = 5.0\nm = 3.0\nparams_tordeuse_yvar = np.array([r, K, alpha, h, epsilon, n, m])\n```\n\nIntégrons (l'appel à `odeint()` est similaire) :\n\n```{python}\nint_tordeuse_yvar = odeint(\n                        model_tordeuse_yvar, \n                        etat0_tordeuse_yvar, \n                        tspan_yvar, \n                        args=(params_tordeuse_yvar,),\n                        hmax=pas_t)\n```\n\nL'intégration renvoit un `array` dont la première colonne est la simulation de la population $x$ et la seconde celle de la population $y$.\n```{python}\nint_tordeuse_yvar[:5,]\n```\n\nReprésentation graphique contre le temps :\n\n```{python}\n#| code-fold: true\n#| label: fig-tordeuse-yvar\n#| fig-cap: Simulation du modèle de tordeuse avec population d'oiseaux variables @eq-tordeuse-yvar\n\nfig3, ax3 = plt.subplots(1, 1)  \nfig3.suptitle('Simulation du modèle de tordeuse'\\\n    ' avec population d\\'oiseaux variable', \n              va='top', fontsize='14')\n\n## simulations\nax3.plot(tspan_yvar, int_tordeuse_yvar[:,0], \n        color = 'C0',\n        label = \"$x(t)$\")\n\n## axes / légendes / grille\nax3.set_xlabel('Temps $t$', fontsize='12')\nax3.set_ylabel('Densité de population $x(t)$', fontsize='12')\nax3.legend()\nax3.grid()\n```\n:::{.callout-note}\nNotons l'appel à toutes les lignes de la première colonne de `int_tordeuse_var` pour récupérer la simulation de la population de tordeuses.\n:::\n\nDans l'espace $(y, x)$, on voit bien l'enchainement des catastrophes et le phénomène de 'bifurcations dynamiques' :\n\n```{python}\n#| code-fold: true\n#| label: fig-tordeuse-yvar-bif\n#| fig-cap: Bifurcations dynamiques dans le modèle de tordeuse avec population d'oiseaux variables @eq-tordeuse-yvar\nfig2.suptitle('Diagramme de bifurcation pour le modèle de tordeuse', \n              va='top', fontsize='14')\n\nax2.plot(int_tordeuse_yvar[:,1], int_tordeuse_yvar[:,0], label='simulation')\nax2.legend()\ndisplay(fig2)\n```\n:::{.callout-note}\nOn a tracé ici le lieu de la simulation population de tordeuses en fonction de la population d'oiseaux, le temps étant implicite.\n:::\n\nLa suite sur les populations en interactions [par ici](pop_interactions.qmd)."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"pygments","reference-location":"margin","css":["styles.css"],"toc":true,"html-math-method":"katex","output-file":"pop_exploitees.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.191","license":"CC BY-NC","bibliography":["references.bib"],"jupyter":"python3","theme":"cosmo","title":"Populations exploitées"},"extensions":{"book":{"multiFile":true}}}}}